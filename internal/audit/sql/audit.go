package sql

import (
	"database/sql"
	"log"
	"proxy-engineering-thesis/model"
)

func PerformAudit(ds DataSourceConnectionData, config model.AuditConfiguration) (model.AuditData, error) {
	var auditResult = model.AuditData{}

	conn, err := GetDBConnection(ds)
	if err != nil {
		log.Printf("failed to create connection for audit: %v\n", err)
		return auditResult, err
	}

	if config.CheckAuditExtension {
		isEnabled, err := checkPgauditInstalled(conn)
		if err != nil {
			log.Printf("failed to check if pgaudit extension is installed: %v\n", err)
		} else {
			auditResult.IsAuditExtensionEnabled = isEnabled
		}
	}

	if config.CheckSuperusers {
		superusers, err := getSuperuserUsernames(conn)
		if err != nil {
			log.Printf("failed to retrieve superusers: %v\n", err)
		}
		auditResult.Superusers = superusers
	}

	if config.CheckAuditLogs {
		isLoggingEnabled, err := isPgauditLoggingEnabled(conn)
		if err != nil {
			log.Printf("failed to check if pgaudit logging is enabled: %v\n", err)
		}
		auditResult.IsAuditLoggingEnabled = isLoggingEnabled
	}

	if config.CheckAuthenticationMethod {
		authMethod, err := getAuthenticationMethod(conn)
		if err != nil {
			log.Printf("failed to retrieve authentication method: %v\n", err)
		}

		auditResult.AuthenticationMethod = authMethod
	}

	return auditResult, nil

}

//method generated by ChatGPT

func checkPgauditInstalled(db *sql.DB) (bool, error) {

	rows, err := db.Query(PgauditQuery)
	if err != nil {
		return false, err
	}
	defer rows.Close()

	// Check if any rows were returned
	return rows.Next(), nil
}

func getSuperuserUsernames(db *sql.DB) ([]string, error) {
	rows, err := db.Query(SuperusersQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var usernames []string

	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		usernames = append(usernames, username)
	}

	return usernames, nil
}

func isPgauditLoggingEnabled(db *sql.DB) (bool, error) {
	rows, err := db.Query(PgauditLoggingQuery)
	if err != nil {
		return false, err
	}
	defer rows.Close()

	for rows.Next() {
		var name, setting string
		if err := rows.Scan(&name, &setting); err != nil {
			return false, err
		}

		if setting != "none" && setting != "" {
			return true, nil
		}
	}

	return false, nil
}

func getAuthenticationMethod(db *sql.DB) (string, error) {
	rows, err := db.Query(AuthMethodQuery)
	if err != nil {
		return "", err
	}
	defer rows.Close()

	for rows.Next() {
		var authMethod string
		if err := rows.Scan(&authMethod); err != nil {
			return "", err
		}

		return authMethod, nil
	}

	return "", nil
}
